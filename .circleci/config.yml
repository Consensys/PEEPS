---
version: 2.1

orbs:
  slack: circleci/slack@3.4.2

executors:
  executor_med:  # 2cpu, 4G ram
    docker:
      - image: circleci/openjdk:11.0.4-jdk-stretch
    resource_class: medium
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx2048m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Xmx2048m

  executor_large: # 4cpu, 8G ram
    docker:
      - image: circleci/openjdk:11.0.4-jdk-stretch
    resource_class: large
    working_directory: ~/project

  executor_machine:
    machine:
      image: ubuntu-2004:202107-02 #Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2
      docker_layer_caching: true
    working_directory: ~/project

commands:
  prepare:
    description: "Prepare"
    steps:
      - checkout
      - restore_cache:
          name: Restore cached gradle dependencies
          keys:
            - deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
            - deps-{{ checksum "build.gradle" }}
            - deps-

  capture_test_results:
    description: "Capture test results"
    steps:
      - run:
          name: Capture test results
          when: always
          command: |
            FILES=`find . -name test-results`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
              TARGET="build/test-results/$MODULE"
              mkdir -p "$TARGET"
              cp -rf ${FILE}/*/* "$TARGET"
            done
      - store_test_results:
          path: build/test-results

  notify:
    description: "Notify Slack"
    steps:
      - slack/status:
          fail_only: true
          only_for_branches: 'master'

jobs:
  build:
    executor: executor_machine
    steps:
      - prepare
      - run:
          name: Build
          command: |
            ./gradlew --no-daemon --parallel build
      - run:
          name: Test
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel test
      - notify
      - capture_test_results
      - save_cache:
          name: Caching gradle dependencies
          key: deps-{{ checksum "build.gradle" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - .gradle
            - ~/.gradle
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./

  endToEndTests:
    executor: executor_machine
    steps:
      - prepare
      - run:
          name: Install Packages - Java 11
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 78BD65473CB3BD13 5DC22404A6F9F1CA
            sudo add-apt-repository -y ppa:openjdk-r/ppa
            sudo apt update
            sudo apt install -y openjdk-11-jdk
            sudo update-java-alternatives -s java-1.11.0-openjdk-amd64
      - run:
          name: Docker login
          command: |
            docker login docker.consensys.net -u $CLOUDSMITH_USER -p $CLOUDSMITH_API_KEY
      - run:
          name: End to End Tests
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel endToEndTest
      - notify
      - capture_test_results
      - store_artifacts:
          path: end-to-end-tests/build/reports
          destination: end-to-end-tests-reports


  acceptanceTestsQuorum:
    parallelism: 1
    executor: executor_machine
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: Quorum Acceptance Tests
          no_output_timeout: 40m
          command: ./gradlew --no-daemon acceptanceTestsQuorum
      - store_artifacts:
          path: build/quorum-at
          destination: quorum-at-artifacts
      - store_test_results:
          path: build/quorum-at/openjdk-latest/reports/xml-report

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 11 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - endToEndTests:
          requires:
            - build
          context:
            - cloudsmith-protocols
      - acceptanceTestsQuorum:
          requires:
            - build
  default:
    jobs:
      - build
      - endToEndTests:
          requires:
            - build
          context:
            - cloudsmith-protocols
            - cloudsmith-protocols
      - acceptanceTestsQuorum:
          requires:
            - build
